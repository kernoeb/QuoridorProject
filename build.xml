<project name="Quoridor" default="run" basedir=".">
	<description>
		Automatisation des tâches et exécution du fichier .jar de l'application
	</description>

	<!-- Définition des principales propriétés du fichier-->
	<property name="src" value="src"/>
	<property name="buildJar" value="buildJar"/>
	<property name="jar" value="jar"/>
	<property name="javaDoc" value="javaDoc"/>

	<target name="init">
		<!-- Définition du tstamp pour obtenir des éléments de date et heure -->
		<tstamp/>

		<!-- Création du dossier class qui contiendra les fichiers compilés -->
		<mkdir dir="${buildJar}"/>
	</target>

	<target name="doc" depends="init" description="generate documentation">
		<javadoc sourcepath="${src}" destdir="${javaDoc}"/>
	</target>

	<target name="compile" depends="doc" description="Compilation des fichiers sources">
		<!-- Compilation des fichiers sources présents dans ${src} en fichiers class dans le dossier ${buildJar} -->
		<javac srcdir="${src}" destdir="${buildJar}" encoding="utf8">
			<!--<exclude name="test/*.java"/>
			<exclude name="test/*/*/*.java"/>-->
		</javac>
	</target>


	<!-- Run jUnit -->
	<target name="junit" depends="compile">

		<junit printsummary="yes" haltonfailure="no">
			<classpath location="lib/junit-4.12.jar" />
			<classpath location="lib/hamcrest-core-1.3.jar" />
			<classpath location="${buildJar}"/>

			<test name="test.quoridor.controller.QuoridorTest"
				  haltonfailure="no" todir="reports">
				<formatter type="xml" />
			</test>

			<test name="test.quoridor.model.PlayerTest"
				  haltonfailure="no" todir="reports">
				<formatter type="xml" />
			</test>

			<test name="test.quoridor.model.AutoPlayerTest"
				  haltonfailure="no" todir="reports">
				<formatter type="xml" />
			</test>

			<test name="test.quoridor.model.HumanPlayerTest"
				  haltonfailure="no" todir="reports">
				<formatter type="xml" />
			</test>

			<test name="test.quoridor.model.BoardTest"
				  haltonfailure="no" todir="reports">
				<formatter type="xml" />
			</test>

			<test name="test.quoridor.model.GameTest"
				  haltonfailure="no" todir="reports">
				<formatter type="xml" />
			</test>

			<test name="test.quoridor.model.SquareTest"
				  haltonfailure="no" todir="reports">
				<formatter type="xml" />
			</test>
		</junit>
	</target>

	<target name="createJar" depends="junit" description="Création du fichier .jar">
		<!-- Création du dossier qui contiendra le fichier .jar -->
		<mkdir dir="${jar}"/>
		<!-- Création du fichier .jar à partir de l'ensemble des fichiers class du dossier ${buildJar} -->
		<jar jarfile="${jar}/${ant.project.name}.jar" basedir="${buildJar}">
			<fileset dir="${src}"/>
		<fileset dir="." includes="data/**" />
		<manifest>
			<attribute name="Main-Class" value="Launcher"/>
		</manifest>
		</jar>
	</target>

	<target name="clean" depends="createJar">
		<!-- Suppression du fichier temporaire ${buildJar} -->
		<delete dir="${buildJar}"/>
	</target>

	<target name="run" depends="clean" description="Exécution du fichier .jar">
		<!-- Exécution du fichier .jar créé
			 L'attribut fork permet d'exécuter ce .jar dans une autre JVM -->
		<java jar="${jar}/${ant.project.name}.jar" fork="true"/>
	</target>
</project>